summary(weight)
weightedData <- svydesign(ids = ~1,data = mydata,weights = ~weight)
weightedtable <- svyCreateTableOne(vars = xvars,strata = "treatment",data=weightedData,test=FALSE)
print(weightedtable,smd=TRUE)
msm <- svyglm(re78~treatment,design=weightedData)
coef(msm)
confint(msm)
weightmodel <- ipwpoint(exposure = treatment,family="gaussian",link="identity",denominator = ~age+educ+black+hispan+married+nodegree+re74+re75,data=mydata,trunc = .01)
mydata$wt <- weightmodel$weights.trun
weightedData <- svydesign(ids = ~1,data = mydata,weights = ~wt)
weightedtable <- svyCreateTableOne(vars = xvars,strata = "treatment",data=weightedData,test=FALSE)
msm <- svyglm(re78~treatment,design=weightedData)
coef(msm)
confint(msm)
?ipwpoint
weightmodel <- ipwpoint(exposure = treatment,family = "binomial",link="logit",denominator = ~age+educ+black+hispan+married+nodegree+re74+re75,data=mydata,trunc = .01)
mydata$wt <- weightmodel$weights.trun
weightedData <- svydesign(ids = ~1,data = mydata,weights = ~wt)
weightedtable <- svyCreateTableOne(vars = xvars,strata = "treatment",data=weightedData,test=FALSE)
msm <- svyglm(re78~treatment,design=weightedData)
coef(msm)
confint(msm)
print(table1,smd=TRUE)
mean(mydata[mydata$treatment==1,]$re78)-mean(mydata[mydata$treatment==0,]$re78)
pscore <- psmodel$fitted.values
summary(pscore)
print(matchedtab1,smd=TRUE)
set.seed(931139)
psmatch_ca <- Match(Tr=mydata$treatment,M=1,X=pscore,replace=FALSE,caliper = .1)
matched2 <- mydata[unlist(psmatch_ca[c("index.treated","index.control")]),]
matchedtab2 <- CreateTableOne(vars = xvars,strata = "treatment",data=matched2,test=FALSE)
print(matchedtab2,smd=TRUE)
mean(matched2[matched2$treatment==1,]$re78)-mean(matched2[matched2$treatment==0,]$re78)
t.test(matched2$re78~matched2$treatment,paired = T)
library(foreign)
library(ggplot2)
library(RColorBrewer)
setwd("~/Documents/Research/Third Year Project/WalkingDSP")
WDSP <- read.csv("Test-testphase1.csv")
p1 <- ggplot(WDSP, aes(x=X, y=Y) ) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_fill_distiller(palette= "RdYlGn", direction=-1) +
#  scale_x_continuous(limits = c(-8,10)) +
#  scale_y_continuous(limits = c(-10,8)) +
theme_void()+
theme(legend.position='none')
p1
p1 <-  ggplot(WDSP,aes(x=X,y=Y))+geom_point()
ggsave("plot003.png",p1)
WDSP2 <- read.csv("Test-testphase2.csv")
p2 <- ggplot(WDSP2, aes(x=X, y=Y) ) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_fill_distiller(palette= "RdYlGn", direction=-1) +
#  scale_x_continuous(limits = c(-8,10)) +
#  scale_y_continuous(limits = c(-10,8)) +
theme_void()+
theme(legend.position='none')
p2
p2 <-  ggplot(WDSP2,aes(x=X,y=Y))+geom_point()
ggsave("plot007.png",p2)
WDSP_p_female <- read.csv("Pilot-female.csv")
p3 <- ggplot(WDSP_p_female, aes(x=X, y=Y) ) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_fill_distiller(palette= "RdYlGn", direction=-1) +
#  scale_x_continuous(limits = c(-8,10)) +
#  scale_y_continuous(limits = c(-10,8)) +
theme_void()+
theme(legend.position='none')
p3
setwd("~/Documents/Research/Third Year Project/WalkingDSP/Summary")
library(tidyverse)
IniCod <- read.csv("InitialCoding.csv")
levels(IniCod$Gender)
IniCod$Gender <- recode(IniCod$Gender,
" f\n"="female",
" m\n"="male")
levels(IniCod$Strategy)
IniCod %>%
group_by(Participant.No,Strategy)%>%
tally()
ggplot(NIFdataSum, aes(x=Condition, y=SI,color=sex))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(position=position_jitterdodge(0.5), cex=1.2)+
theme_grey(base_size = 22)
NIFdataSum <- IniCod %>%
group_by(Participant.No)%>%
summarise(
success=20-sum(Strategy=="failure"),
SI=sum(Strategy=="shortcut")/success,
sex=unique(Gender)
)
NIFdataSum$Condition=c(rep("desktop",9),rep("iVR",9))
ggplot(NIFdataSum, aes(x=Condition, y=SI,color=sex))+
geom_boxplot(outlier.shape = NA)+
geom_jitter(position=position_jitterdodge(0.5), cex=1.2)+
theme_grey(base_size = 22)
#ggsave("SI_ConditionBySex.png")
setwd("~/Documents/Research/Third Year Project/Pointing Task/20Winter/Shortcutting-prior/learning")
library(tidyverse)
df <- read.csv("PointingDSP_learning.csv")
df_simple <- df[df$Time<100,]
set.seed(123)
df_sample <- df_simple[sample(nrow(df_simple),100000),]
df_sample$PartNo <- as.factor(df_sample$PartNo)
df_sample$PartGen <- as.factor(df_sample$PartGen)
ggplot(df_sample,aes(x=x,y=z,color=PartGen))+
geom_point(alpha=0.01)+
facet_wrap("PartGen")
ggplot(df_sample,aes(x=x,y=z,color=PartGen))+
geom_point(alpha=0.1)+
facet_wrap("PartNo")
ggplot(df[df$PartNo%in%c("670","669","666","636","628","647")&df$Time<90,],aes(x=x,y=z,color=as.factor(PartGen)))+
geom_point()+
scale_color_manual(name="Sex",labels=c("female","male"),values=c('#D4D4D4','#000000'))+
facet_wrap("PartNo")+
theme_bw(base_size = 25)+
theme(legend.text = element_text(size = 28))+
guides(colour = guide_legend(override.aes = list(size=6)))
#ggsave("sampleParticipantsDSP2.png",width = 13,height = 7)
diff.corr <- function( r1, n1, r2, n2 ){
Z1 <- 0.5 * log( (1+r1)/(1-r1) )
Z2 <- 0.5 * log( (1+r2)/(1-r2) )
diff   <- Z1 - Z2
SEdiff <- sqrt( 1/(n1 - 3) + 1/(n2 - 3) )
diff.Z  <- diff/SEdiff
p <- 2*pnorm( abs(diff.Z), lower=F)
cat( "Two-tailed p-value", p , "\n" )
}
diff.corr( r1=0.32, n1=20, r2=0.46, n2=56)
setwd("~/Documents/Research/Fifth_Year_Projects/PointingDSP/2021_Analysis")
library(tidyverse)
Exp1.trial <- read.csv('Exp1trialfeature.csv')
Exp1.dis <- read.csv('Exp1_total_dis.csv')
colnames(Exp1.dis)[2] <- 'DSP_Trial'
Exp1.dis <- merge(Exp1.dis,Exp1.trial,by='DSP_Trial')
Exp1.dis$ES <- Exp1.dis$total_dis/Exp1.dis$ShortDistance
Exp1.dis<- Exp1.dis %>%
dplyr::select(DSP_Trial,PartNo,total_dis,ES)
psych::describe(Exp1.dis$ES)
hist(Exp1.dis$ES)
colnames(Exp1.dis)[0:2] <- c("TrialID","subject")
Exp1.NavRaw <- read.csv("Exp1ShortcuttingRaw.csv")
Exp1.NavRaw<- merge(Exp1.NavRaw,Exp1.dis,by=c("TrialID","subject"))
sc_success <- Exp1.NavRaw %>%
group_by(subject)%>%
count(Status)%>%
spread(., Status, n)%>%
replace(is.na(.),0)
sc_success
exp(0.9)
version
install.packages("splithalf")
library(splithalf)
install.packages(c("psych", "tidyverse"))
setwd("~/Documents/Research/Fifth_Year_Projects/PointingDSP/2021_Analysis")
library(tidyverse)
point_1 <- read_csv('exp1Point.csv')
View(point_1)
point_1 <- read_csv('exp1Point.csv')
point_1 <- read_csv('exp1Point.csv')
head(point_1)
library(splithalf)
splithalf(data=point_1,
var.trialnum = "TrialID",
var.participant = "Subject",
var.ACC = "AngleError")
library(splithalf)
splithalf(data=point_1,
outcome = "AngleError",
score = "average",
halftype = "random",
permutations = 5000,
var.RT = "AngleError",
var.trialnum = "TrialID",
var.participant = "Subject",
average="mean")
library(splithalf)
splithalf(data=point_1,
outcome = "ACC",
score = "average",
halftype = "random",
permutations = 5000,
var.ACC = "AngleError",
var.trialnum = "TrialID",
var.participant = "Subject",
average="mean")
library(splithalf)
splithalf(data=point_1,
outcome = "accuracy",
score = "average",
halftype = "random",
permutations = 5000,
var.ACC = "AngleError",
var.trialnum = "TrialID",
var.participant = "Subject",
average="mean")
1/0.059
1/0.331
1/0.298
1/0.347
1/0.328
1/3
(.92+.48+.76+.54+.80+.85)/6
log(0.5)/log(0.1)
log(0.5)
1- log(0.5)/log(0.1)
library(readr)
exp1_compare <- read_csv("Documents/Research/Third Year Project/Chemistry/Symmetry/SymmetryDataAnalysis/RawData/OpenScienceFiles/exp1_compare.csv")
View(exp1_compare)
library(readr)
Exp1_check <- read_csv("Documents/Research/Third Year Project/Chemistry/Symmetry/SymmetryDataAnalysis/RawData/OpenScienceFiles/Exp1_check.csv")
View(Exp1_check)
library(readr)
Exp2_check <- read_csv("Documents/Research/Third Year Project/Chemistry/Symmetry/SymmetryDataAnalysis/RawData/OpenScienceFiles/Exp2_check.csv")
View(Exp2_check)
setwd("~/Documents/Research/Third Year Project/Chemistry/Symmetry/SymmetryDataAnalysis/RawData/OpenScienceFiles/Exp2_data")
## Script name: Exp2_MainAnalysis
##
## Purpose of script: Experiment 2 data cleaning and EDA and linear mixed model development
##
## Author: Chuanxiuyue (Carol) He
##
## Date Created: 2020-12-22
##
## Email: carol.hcxy@gmail.com
##
## Content:
##      1. Load Experiment 2 Data
##      2. Experiment 2 Data Cleaning
##      3. Accuracy Descriptive Statistics
##      4. Response Time Descriptive Statistics
##      5. d' Calculation
##      6. d' Descriptive Statistics
##      7. Bias Calculation
##      8. Bias Descriptive Statistics
##      9. Spatial Ability
##      10. Spatial Ability Descriptive Statistics
##      11. Correlation comparisons
##      12. Linear Regression
## ---------------------------
## ---------------------------
## set working directory for Mac and PC
setwd("~/CarolHe/")      # Carol's working directory (mac)
setwd("C:/Users/carolhe/")    # if using PC
## ---------------------------
## load up the packages
## use install.packages() to install new packages
library(tidyverse)
library(reshape2)
library(foreign) # read sav data
library(psych) # descriptive statistics
library(lme4) #linear mixed model
library(rstatix) #chi-squared tests for mixed model
## ---------------------------
#####----------Load Experiment 2 Data----------#####
## read txt files
txt_files_ls <-  list.files(
path=getwd(),
pattern = "*.txt")
txt_files_df <- lapply(txt_files_ls,
function(x)
{
tmp <- try(read.table(
file = x,
header = TRUE,
sep=";"))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(txt_files_df,
as.data.frame)
)
#####----------Experiment 2 Data Cleaning----------#####
## finds -99999 values in the accuracy column and sets them to NA so that we can omit them and saving a new data frame
combined_df$accuracy[combined_df$accuracy == -99999] <- 0
## finds timed-out trials and sets them to NA
combined_df$time[combined_df$time == -1] <- NA
## no dual task trials set as NA
combined_df$dualTaskAcc[combined_df$dualTaskAcc == -99] <- NA
## ignore clockwise versus counterclockwise
combined_df$rotation <- with(combined_df, ifelse(rotation <= 0, -rotation, rotation))
## performance on the concurrent verbal task:
v_df <- na.omit(combined_df)
v_perf <- aggregate(v_df$dualTaskAcc,
list(subject=v_df$subject),
mean)
names(v_perf) [2] <- "VerbTaskAcc"
## performance on the structure detection task:
Exp2_sdt <- aggregate(combined_df$accuracy,
list(subject=combined_df$subject,
rotation=combined_df$rotation,
startsym=combined_df$startSym,
change=combined_df$change),
mean)
names(Exp2_sdt)[5] <- "acc"
View(v_perf)
hist(v_perf$VerbTaskAcc)
hist(v_perf$VerbTaskAcc)
psych::describe(v_perf$VerbTaskAcc)
v_perf <- v_perf[v_perf$VerbTaskAcc>=0.6,]
## exclude low verb_acc participants
Exp2_sdt <- Exp2_sdt[Exp2_sdt$subject %in% v_perf$subject,]
re_Exp2_sdt<-
recast(Exp2_sdt,
subject ~ rotation + startsym + change,
id.var = c("subject", "rotation",  "startsym", "change"))
names(re_Exp2_sdt) <- c("subject","r10_as_s","r10_as_d","r10_sym_s","r10_sym_d","r60_as_s","r60_as_d","r60_sym_s","r60_sym_d","r120_as_s","r120_as_d","r120_sym_s","r120_sym_d")
Exp2_fh <- re_Exp2_sdt %>%
mutate_at(c("r10_as_s","r10_sym_s",
"r60_as_s","r60_sym_s",
"r120_as_s","r120_sym_s"),
list(f=~ifelse(.==1,1/40,1-.)))%>%
mutate_at(vars(contains('_d')),
list(h=~ifelse(.==1,1-(1/40),.)))%>%
mutate_at(vars(contains('_f'),contains('_h')),
list(z=~qnorm(.)))
Exp2_fh <- Exp2_fh%>%
mutate(r10.as.dp=r10_as_d_h_z-r10_as_s_f_z)%>%
mutate(r10.sym.dp=r10_sym_d_h_z-r10_sym_s_f_z)%>%
mutate(r60.as.dp=r60_as_d_h_z-r60_as_s_f_z)%>%
mutate(r60.sym.dp=r60_sym_d_h_z-r60_sym_s_f_z)%>%
mutate(r120.as.dp=r120_as_d_h_z-r120_as_s_f_z)%>%
mutate(r120.sym.dp=r120_sym_d_h_z-r120_sym_s_f_z)
Exp2_dpr <- Exp2_fh%>%
select(subject,contains('dp'))
## wide to long
Exp2_dpr_long <- reshape(Exp2_dpr,
direction = 'long',
idvar = 'subject',
varying = c(2:7),
timevar='rotation',
times=c('r10', 'r60','r120'),
v.names=c('as.dp', 'sym.dp'))
Exp2_dpr_long <- gather(Exp2_dpr_long,
symmetry,
dp,
as.dp:sym.dp,
factor_key = T)
Exp2_dpr_long$rotation <- as.factor(Exp2_dpr_long$rotation)
Exp2_dpr_long$subject <- as.factor(Exp2_dpr_long$subject)
Exp2_dpr_long$symmetry <-
recode(Exp2_dpr_long$symmetry,
'as.dp'='asymmetrical',
'sym.dp'='symmetrical')
Exp2_dpr_long$rotation <-
recode(Exp2_dpr_long$rotation,
'r10'='10-degree',
'r60'='60-degree',
'r120'='120-degree')
Exp2_dpr_long <-Exp2_dpr_long%>%
mutate(rotation = forcats::fct_relevel(rotation, c("10-degree", "60-degree", "120-degree")))%>%
mutate(rotation_num = dplyr::case_when(
rotation == '10-degree'  ~ 10,
rotation == '60-degree'  ~ 60,
rotation == '120-degree'  ~ 120))
Exp2 <- read.spss('Exp2.sav',to.data.frame = T)
Exp2_psy <- Exp2%>%
select(subject,PF,CC,VR,RAPM)
## new:
Exp2_psy <- re_Exp2_sdt%>%
merge(df2_c,.,by="subject")%>%
mutate(all.Acc.s=rowSums(.[c("r10_sym_s","r60_sym_s","r120_sym_s","r10_as_s","r60_as_s","r120_as_s")])/6)%>%
mutate(all.Acc.d=rowSums(.[c("r10_sym_d","r60_sym_d","r120_sym_d","r10_as_d","r60_as_d","r120_as_d")])/6)%>%
mutate(sym.Acc.s=rowSums(.[c("r10_sym_s","r60_sym_s","r120_sym_s")])/3)%>%
mutate(sym.Acc.d=rowSums(.[c("r10_sym_d","r60_sym_d","r120_sym_d")])/3)%>%
mutate(as.Acc.s=rowSums(.[c("r10_as_s","r60_as_s","r120_as_s")])/3)%>%
mutate(as.Acc.d=rowSums(.[c("r10_as_d","r60_as_d","r120_as_d")])/3)%>%
mutate(all.Acc.f_z=ifelse(all.Acc.s==1,qnorm(1/240),qnorm(1-all.Acc.s)))%>%
mutate(all.Acc.h_z=ifelse(all.Acc.d==1,qnorm(1-1/240),qnorm(all.Acc.d)))%>%
mutate(sym.Acc.f_z=ifelse(sym.Acc.s==1,qnorm(1/120),qnorm(1-sym.Acc.s)))%>%
mutate(sym.Acc.h_z=ifelse(sym.Acc.d==1,qnorm(1-1/120),qnorm(sym.Acc.d)))%>%
mutate(as.Acc.f_z=ifelse(as.Acc.s==1,qnorm(1/120),qnorm(1-as.Acc.s)))%>%
mutate(as.Acc.h_z=ifelse(as.Acc.d==1,qnorm(1-1/120),qnorm(as.Acc.d)))%>%
mutate(all.Dp=all.Acc.h_z-all.Acc.f_z)%>%
mutate(sym.Dp=sym.Acc.h_z-sym.Acc.f_z)%>%
mutate(as.Dp=as.Acc.h_z-as.Acc.f_z)%>%
select(subject,all.Dp,sym.Dp,as.Dp,pf_score,PF_SAV,cc_score,CC_SAV,total_vr_score,VR_SAV)
##new^
## merge spatial ability score with structure detection score
Exp2_psy <- re_Exp2_sdt%>%
merge(Exp2_psy,.,by="subject")%>%
mutate(all.Acc.s=rowSums(.[c("r10_sym_s","r60_sym_s","r120_sym_s","r10_as_s","r60_as_s","r120_as_s")])/6)%>%
mutate(all.Acc.d=rowSums(.[c("r10_sym_d","r60_sym_d","r120_sym_d","r10_as_d","r60_as_d","r120_as_d")])/6)%>%
mutate(sym.Acc.s=rowSums(.[c("r10_sym_s","r60_sym_s","r120_sym_s")])/3)%>%
mutate(sym.Acc.d=rowSums(.[c("r10_sym_d","r60_sym_d","r120_sym_d")])/3)%>%
mutate(as.Acc.s=rowSums(.[c("r10_as_s","r60_as_s","r120_as_s")])/3)%>%
mutate(as.Acc.d=rowSums(.[c("r10_as_d","r60_as_d","r120_as_d")])/3)%>%
mutate(all.Acc.f_z=ifelse(all.Acc.s==1,qnorm(1/240),qnorm(1-all.Acc.s)))%>%
mutate(all.Acc.h_z=ifelse(all.Acc.d==1,qnorm(1-1/240),qnorm(all.Acc.d)))%>%
mutate(sym.Acc.f_z=ifelse(sym.Acc.s==1,qnorm(1/120),qnorm(1-sym.Acc.s)))%>%
mutate(sym.Acc.h_z=ifelse(sym.Acc.d==1,qnorm(1-1/120),qnorm(sym.Acc.d)))%>%
mutate(as.Acc.f_z=ifelse(as.Acc.s==1,qnorm(1/120),qnorm(1-as.Acc.s)))%>%
mutate(as.Acc.h_z=ifelse(as.Acc.d==1,qnorm(1-1/120),qnorm(as.Acc.d)))%>%
mutate(all.Dp=all.Acc.h_z-all.Acc.f_z)%>%
mutate(sym.Dp=sym.Acc.h_z-sym.Acc.f_z)%>%
mutate(as.Dp=as.Acc.h_z-as.Acc.f_z)%>%
select(subject,all.Dp,sym.Dp,as.Dp,PF,CC,VR,RAPM)
Exp2_spab <- merge(Exp2_psy,
Exp2_dpr_long,
by="subject")%>%
mutate(SA=(scale(PF,center = T,scale = T)+
scale(CC,center = T,scale = T))/2)%>%
mutate(rotation_s=scale(rotation_num,
center=T,scale=T))%>%
mutate(VR_s=scale(VR,center=TRUE,scale=TRUE))%>%
mutate(RAPM_s=scale(RAPM,center=TRUE,scale=TRUE))%>%
select(subject,rotation_s,symmetry,dp,SA,VR_s,RAPM_s)
Exp2_spab$subject <- as.factor(Exp2_spab$subject)
Exp2_spab$symmetry <- as.factor(Exp2_spab$symmetry)
Exp2_spab$symmetry <- relevel(Exp2_spab$symmetry,ref= 'asymmetrical')
View(Exp2_spab)
colnames(v_perf)
test <- merge(v_perf,
Exp2_spab,
by="subject")
View(test)
test <- merge(v_perf,
Exp2_spab,
by="subject")%>%
mutate(v_perf_c=scale(VerbTaskAcc,
center=T,scale=T))%>%
select(-VerbTaskAcc)
View(test)
View(test)
Exp2.lmm1 <- lmer(dp ~
rotation_s * symmetry+
SA+SA:symmetry+SA:rotation_s+
VR_s+RAPM_s+v_perf_c+
(1|subject),
data = test,
REML = F)
summary(Exp2.lmm1)
Anova(Exp2.lmm1)
library(BayesFactor)
bf = anovaBF(dp ~
rotation_s * symmetry+
SA+SA:symmetry+SA:rotation_s+
VR_s+RAPM_s+v_perf_c+subject, data=test, whichRandom="subject")
bf
plot(bf)
bf = anovaBF(dp ~ rotation_s * symmetry+
SA+SA:symmetry+SA:rotation_s+
VR_s+RAPM_s+v_perf_c+subject,
data=test, whichRandom="subject")
View(test)
bf = anovaBF(dp ~ rotation_s * symmetry+
SA+SA:symmetry+SA:rotation_s+
VR_s+RAPM_s+v_perf_c+subject
,whichRandom="subject"
,data = test)
bf = anovaBF(dp ~ rotation_s * symmetry+subject
,whichRandom="subject"
,data = test)
bf = anovaBF(dp ~ rotation_s*symmetry + subject
,whichRandom="subject"
,data = test)
colnames(test)
test$subject<- as.factor(test$subject)
bf = anovaBF(dp ~ rotation_s*symmetry + subject
,whichRandom="subject"
,data = test)
bf = lmBF(dp ~ rotation_s*symmetry + subject
,whichRandom="subject"
,data = test)
bf
bf = regressionBF(dp ~
rotation_s * symmetry+
SA+SA:symmetry+SA:rotation_s+
VR_s+RAPM_s+v_perf_c + subject
,whichRandom="subject"
,data = test)
head(bf,n=6)
GenBF <- generalTestBF(dp ~
rotation_s * symmetry+
SA+SA:symmetry+
SA:rotation_s+
VR_s+RAPM_s+v_perf_c +
subject,
data=test, whichRandom="subject")
GenBF
GenBF1 <- generalTestBF(dp ~
rotation_s * symmetry+
SA+SA:symmetry+
subject,
data=test, whichRandom="subject")
GenBF1
GenBF1[12]
GenBF1[9]
GenBF1[9]/GenBF1[12]
GenBF[257]
GenBF[221]
GenBF1 <- generalTestBF(dp ~
rotation_s * symmetry+
SA+SA:symmetry+SA:rotation_s+
VR_s+RAPM_s+subject,
data=Exp2_spab, whichRandom="subject")
GenBF1
GenBF1 <- generalTestBF(dp ~
rotation_s * symmetry+
SA+SA:symmetry+SA:rotation_s+
VR_s+RAPM_s+subject,
data=Exp2_spab, whichRandom="subject",neverExclude="subject")
GenBF1
GenBF1[71]
GenBF1[66]
GenBF1[66]/GenBF1[77]
GenBF1[66]/GenBF1[71]
GenBF1[71]/GenBF1[66]
